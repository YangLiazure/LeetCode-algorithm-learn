// 406 根据身高重建队列


假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，
前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

/*************************************/


输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。

题解：
    本题有些类似区间问题，但相似的地方很少————重新构造后的队列和身高有问题 所以我们需要对身高先进行一个排序
	这里涉及到按照从高到低还是从低到高进行排序 实际上如果我们默认从左向右遍历原来的数组 排序的本质就是在问我们一个问题：
	先处理身高的人还是先处理身高矮的人。
	这里，就需要看题目中另一个关键信息：k ->代表的是新建队列中该位置的前面 比该位置上的人的人高的人有几个 
	想一下 队列中最高的人的k值一定是 0 或者等于一些其他值 我们对k值进行一个排序 将k值小的放在前面
	那么问题就来了 如果我们只往新队列中插入最高的人 那么实际上就是按照k值从小到大插入的
	对于第二高的人：因为比第二高的人就只有第一高的人 那么此时队列中已经都是第一高的人了 我们直接按照k值对第二高的人进行插入——直接插入到当前数组第k
	个位置也必定是符合要求的...对于接下来的第三高的人同理
	本题目的贪心策略 并不是很明显 硬要说就是 每次选择最高的并且k值小的人 插入到队列的对应位置，因为对于不同身高的人插入时，队列中的人都是比它高的（因为对于不同身高的人插入时，队列中的人都是比它高的（因）
    也只有身高高的会对k产生影响）直接插入当前新建队列地对应位置即可


class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(),people.end(),[](vector<int>&a,vector<int>&b)
        {
            if(a[0]!=b[0])
                return a[0]>b[0];
            else
                return a[1]<b[1];
            });   // 这里采用的是lambda函数 可以查询其具体语法 这里的意思是 按照身高从高到低排序 对于身高相同的就按k值排序
        // 第一步先进行排序 我们选择对身高 从高到低 进行排序 
        // 为什么选择用身高进行排序呢 因为我们考虑的思路是 在如果我们能够找到一种方法，让每次处理一个人时，他前面已经排好的人都不会对他的 k 值产生影响 所以对身高进行排序 并遍历这个新的队列
        vector<vector<int>>queue; //新建队列
        // 新建队列 用于以后插入
        for(int i = 0;i<people.size();++i)
        {
            queue.insert(queue.begin()+people[i][1],people[i]); 
        }
        //由于我们是从高到低遍历，当插入一个新的人时，队列中已有的所有人身高都大于或等于他。
        //因此，将他插入到第 k 个位置，正好可以保证在他前面的高个子（或等高）人数正好是 k，完美地满足了题目的要求。
        return queue;
    }
};